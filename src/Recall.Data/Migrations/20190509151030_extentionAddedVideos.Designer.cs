// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Recall.Data;

namespace Recall.Data.Migrations
{
    [DbContext(typeof(RecallDbContext))]
    [Migration("20190509151030_extentionAddedVideos")]
    partial class extentionAddedVideos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Recall.Data.Models.Directory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfSubdirectories");

                    b.Property<int>("NumberOfVideos");

                    b.Property<int>("Order");

                    b.Property<int?>("ParentDirectoryId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentDirectoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("Recall.Data.Models.ExtensionAddedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExtensionAddedVideos");
                });

            modelBuilder.Entity("Recall.Data.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("BorderColor");

                    b.Property<int>("BorderThickness");

                    b.Property<string>("Content");

                    b.Property<int>("Formatting");

                    b.Property<int>("Level");

                    b.Property<int>("Order");

                    b.Property<int?>("ParentNoteId");

                    b.Property<int?>("SeekTo");

                    b.Property<string>("TextColor");

                    b.Property<int>("Type");

                    b.Property<int>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("VideoId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Recall.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("HashedPassword");

                    b.Property<string>("LastName");

                    b.Property<string>("Role");

                    b.Property<int?>("RootDirectoryId");

                    b.Property<string>("Salt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Recall.Data.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("DirectoryId");

                    b.Property<bool>("IsLocal");

                    b.Property<bool>("IsVimeo");

                    b.Property<bool>("IsYouTube");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int?>("SeekTo");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Recall.Data.Models.Directory", b =>
                {
                    b.HasOne("Recall.Data.Models.Directory", "ParentDirectory")
                        .WithMany("Subdirectories")
                        .HasForeignKey("ParentDirectoryId");

                    b.HasOne("Recall.Data.Models.User", "User")
                        .WithMany("Directories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recall.Data.Models.ExtensionAddedVideo", b =>
                {
                    b.HasOne("Recall.Data.Models.User", "User")
                        .WithMany("ExtensionAddedVideos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recall.Data.Models.Note", b =>
                {
                    b.HasOne("Recall.Data.Models.Note", "ParentNote")
                        .WithMany("ChildNotes")
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("Recall.Data.Models.Video", "Video")
                        .WithMany("Notes")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Recall.Data.Models.User", b =>
                {
                    b.HasOne("Recall.Data.Models.Directory", "RootDirectory")
                        .WithOne("RootUser")
                        .HasForeignKey("Recall.Data.Models.User", "RootDirectoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Recall.Data.Models.Video", b =>
                {
                    b.HasOne("Recall.Data.Models.Directory", "Directiry")
                        .WithMany("Videos")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recall.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
